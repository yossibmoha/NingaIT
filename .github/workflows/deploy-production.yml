name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ninjait
          IMAGE_TAG: ${{ github.event.release.tag_name || github.sha }}
        run: |
          # Build API Gateway
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-api:$IMAGE_TAG ./backend/api-gateway
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-api:latest ./backend/api-gateway
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-api:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-api:latest
          
          # Build Frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG ./frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:latest ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:latest

      - name: Deploy to ECS (Blue/Green)
        run: |
          echo "Deploying to ECS production environment..."
          # Add ECS Blue/Green deployment commands here

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # Add migration commands here

      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback commands here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

